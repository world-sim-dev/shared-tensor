[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "shared-tensor"
version = "0.1.1"
description = "A library for sharing GPU memory objects across processes using IPC mechanisms"
readme = "README.md"
license = "Apache-2.0"
authors = [
    {name = "Athena Team", email = "contact@world-sim-dev.org"}
]
maintainers = [
    {name = "Athena Team", email = "contact@world-sim-dev.org"}
]
keywords = [
    "gpu",
    "memory", 
    "sharing",
    "ipc",
    "inter-process-communication",
    "pytorch",
    "tensorflow",
    "cuda",
    "model-serving",
    "inference",
    "distributed-computing"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Hardware :: Symmetric Multi-processing",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=1.12.0",
    "numpy>=1.20.0",
    "requests>=2.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=22.0",
    "flake8>=4.0",
    "isort>=5.0",
    "mypy>=0.950",
    "pre-commit>=2.0.0",
    "build>=0.8.0",
    "twine>=4.0.0",
]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-benchmark>=3.0",
    "pytest-asyncio>=0.20.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/world-sim-dev/shared-tensor"
Repository = "https://github.com/world-sim-dev/shared-tensor"
Documentation = "https://github.com/world-sim-dev/shared-tensor/wiki"
"Bug Reports" = "https://github.com/world-sim-dev/shared-tensor/issues"
Changelog = "https://github.com/world-sim-dev/shared-tensor/releases"

[project.scripts]
shared-tensor-server = "shared_tensor.server:main"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
exclude = ["tests*", "examples*", "docs*"]

[tool.setuptools.package-data]
shared_tensor = ["*.so", "*.dll", "*.dylib"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "numpy.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=shared_tensor",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests as requiring GPU (deselect with '-m \"not gpu\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["shared_tensor"]
omit = [
    "tests/*",
    "examples/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# flake8 configuration (in setup.cfg format within pyproject.toml comments)
# [flake8]
# max-line-length = 88
# extend-ignore = E203, E266, E501, W503
# max-complexity = 10
# select = B,C,E,F,W,T4,B9

# Ruff configuration (modern alternative to flake8)
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "B018"]

[tool.ruff.isort]
known-first-party = ["shared_tensor"]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]
